//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\OOP\LabCalculator\LabCalculator.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabCalculator {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LabCalculatorLexer : Lexer {
	public const int
		NUMBER=1, IDENTIFIER=2, INT=3, EXPONENT=4, MULTIPLY=5, DIVIDE=6, SUBTRACT=7, 
		ADD=8, LPAREN=9, RPAREN=10, COMMA=11, DIV=12, MOD=13, MAX=14, MIN=15, 
		INC=16, DEC=17, WS=18;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NUMBER", "IDENTIFIER", "INT", "EXPONENT", "MULTIPLY", "DIVIDE", "SUBTRACT", 
		"ADD", "LPAREN", "RPAREN", "COMMA", "DIV", "MOD", "MAX", "MIN", "INC", 
		"DEC", "WS"
	};


	public LabCalculatorLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'^'", "'*'", "'/'", "'-'", "'+'", "'('", "')'", 
		"','", "'div'", "'mod'", "'max'", "'min'", "'inc'", "'dec'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "IDENTIFIER", "INT", "EXPONENT", "MULTIPLY", "DIVIDE", 
		"SUBTRACT", "ADD", "LPAREN", "RPAREN", "COMMA", "DIV", "MOD", "MAX", "MIN", 
		"INC", "DEC", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LabCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x14h\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x3\x2\x3\x2\x3\x2\x5\x2"+
		"+\n\x2\x3\x3\x6\x3.\n\x3\r\x3\xE\x3/\x3\x3\x3\x3\x6\x3\x34\n\x3\r\x3\xE"+
		"\x3\x35\x3\x4\x6\x4\x39\n\x4\r\x4\xE\x4:\x3\x5\x3\x5\x3\x6\x3\x6\x3\a"+
		"\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r"+
		"\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x2\x2\x2\x14\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2"+
		"\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE"+
		"\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\x3\x2\x6\x4\x2"+
		"\x43\\\x63|\x3\x2\x33;\x3\x2\x32;\x5\x2\v\f\xF\xF\"\"k\x2\x3\x3\x2\x2"+
		"\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2"+
		"\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2"+
		"\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B"+
		"\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2"+
		"#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x3\'\x3\x2\x2\x2\x5-\x3\x2\x2\x2\a\x38\x3"+
		"\x2\x2\x2\t<\x3\x2\x2\x2\v>\x3\x2\x2\x2\r@\x3\x2\x2\x2\xF\x42\x3\x2\x2"+
		"\x2\x11\x44\x3\x2\x2\x2\x13\x46\x3\x2\x2\x2\x15H\x3\x2\x2\x2\x17J\x3\x2"+
		"\x2\x2\x19L\x3\x2\x2\x2\x1BP\x3\x2\x2\x2\x1DT\x3\x2\x2\x2\x1FX\x3\x2\x2"+
		"\x2!\\\x3\x2\x2\x2#`\x3\x2\x2\x2%\x64\x3\x2\x2\x2\'*\x5\a\x4\x2()\a\x30"+
		"\x2\x2)+\x5\a\x4\x2*(\x3\x2\x2\x2*+\x3\x2\x2\x2+\x4\x3\x2\x2\x2,.\t\x2"+
		"\x2\x2-,\x3\x2\x2\x2./\x3\x2\x2\x2/-\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30"+
		"\x31\x3\x2\x2\x2\x31\x33\t\x3\x2\x2\x32\x34\t\x4\x2\x2\x33\x32\x3\x2\x2"+
		"\x2\x34\x35\x3\x2\x2\x2\x35\x33\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x6"+
		"\x3\x2\x2\x2\x37\x39\x4\x32;\x2\x38\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2:"+
		"\x38\x3\x2\x2\x2:;\x3\x2\x2\x2;\b\x3\x2\x2\x2<=\a`\x2\x2=\n\x3\x2\x2\x2"+
		">?\a,\x2\x2?\f\x3\x2\x2\x2@\x41\a\x31\x2\x2\x41\xE\x3\x2\x2\x2\x42\x43"+
		"\a/\x2\x2\x43\x10\x3\x2\x2\x2\x44\x45\a-\x2\x2\x45\x12\x3\x2\x2\x2\x46"+
		"G\a*\x2\x2G\x14\x3\x2\x2\x2HI\a+\x2\x2I\x16\x3\x2\x2\x2JK\a.\x2\x2K\x18"+
		"\x3\x2\x2\x2LM\a\x66\x2\x2MN\ak\x2\x2NO\ax\x2\x2O\x1A\x3\x2\x2\x2PQ\a"+
		"o\x2\x2QR\aq\x2\x2RS\a\x66\x2\x2S\x1C\x3\x2\x2\x2TU\ao\x2\x2UV\a\x63\x2"+
		"\x2VW\az\x2\x2W\x1E\x3\x2\x2\x2XY\ao\x2\x2YZ\ak\x2\x2Z[\ap\x2\x2[ \x3"+
		"\x2\x2\x2\\]\ak\x2\x2]^\ap\x2\x2^_\a\x65\x2\x2_\"\x3\x2\x2\x2`\x61\a\x66"+
		"\x2\x2\x61\x62\ag\x2\x2\x62\x63\a\x65\x2\x2\x63$\x3\x2\x2\x2\x64\x65\t"+
		"\x5\x2\x2\x65\x66\x3\x2\x2\x2\x66g\b\x13\x2\x2g&\x3\x2\x2\x2\a\x2*/\x35"+
		":\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabCalculator
